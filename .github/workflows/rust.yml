name: Test and Build

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: time-signal
  BINARY_DIR: .tmp

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
#      fail-fast: false

    name: Test and Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install -y libasound2-dev libdbus-1-dev

#    - name: Set up Rust
#      run: rustup toolchain install stable --profile minimal --no-self-update

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0

    - name: Check
      if: matrix.os != 'macos-latest'
      run: cargo check --verbose

    - name: Test
      if: matrix.os != 'macos-latest'
      run: cargo test --verbose

    - name: Build
      run: cargo build --release --verbose

    - name: Prepare binary for upload
      id: prepare_binary
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # macOSの場合、バイナリ名に "-macos" を追加してリネーム
          NEW_NAME="${{ env.BINARY_NAME }}-macos"
          mv "target/release/${{ env.BINARY_NAME }}" "target/release/${NEW_NAME}"
          echo "path=target/release/${NEW_NAME}" >> $GITHUB_OUTPUT
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          # Windowsの場合は .exe 拡張子を付けたパスを設定
          echo "path=target/release/${{ env.BINARY_NAME }}.exe" >> $GITHUB_OUTPUT
        else
          # Linuxの場合は元のバイナリ名のパスを設定
          echo "path=target/release/${{ env.BINARY_NAME }}" >> $GITHUB_OUTPUT
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os }}
        path: ${{ steps.prepare_binary.outputs.path }}

  release:
    name: Publish binaries to GitHub Releases
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: artifacts/*
