name: Test and Build

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: time-signal
  BINARY_DIR: .tmp

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
#      fail-fast: false

    name: Test and Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install -y libasound2-dev libdbus-1-dev

#    - name: Set up Rust
#      run: rustup toolchain install stable --profile minimal --no-self-update

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0

    - name: Check
      if: matrix.os != 'macos-latest'
      run: cargo check --verbose

    - name: Test
      if: matrix.os != 'macos-latest'
      run: cargo test --verbose

    - name: Build
      run: cargo build --release --verbose

    - name: Prepare artifact
      run: |
        mkdir artifact
        cp target/release/${{ env.BINARY_NAME }}${{ runner.os == 'Windows' && '.exe' || '' }} artifact/

    - name: Add PS1 script to windows artifact
      if: matrix.os == 'windows-latest'
      run: |
        cp no-terminal.ps1 artifact/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os }}
        path: artifact/

  release:
    name: Publish binaries to GitHub Releases
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.0

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@v1.14.4

      - name: Install cargo-about
        run: cargo binstall -y cargo-about

      - name: Generate LICENSES.md
        run: cargo about generate about.hbs > LICENSES.md

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Add LICENSES.md to each artifact
        run: |
          for dir in artifacts/*/; do
            cp LICENSES.md "$dir";
          done

      - name: Create ZIP files
        run: |
          cd ./artifacts
          for dir in */; do
            zip -j "${dir%/}.zip" "$dir"/*
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: artifacts/*.zip

